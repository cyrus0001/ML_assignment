
#Import necessary library

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#Load the dataset 
data=pd.read_csv("cancer.csv")
data.head()

data.info()

# Extract the attributes for clustering and plotting
attributes = ["radius_mean", "texture_mean"]
X = data[attributes].values

X.shape
(569, 2)


# K-Means Clustering
def initialize_clusters_kmeans(X, num_clusters):
 random_indices = np.random.choice(X.shape[0], num_clusters, replace=False)
 centroids = X[random_indices]
 return centroids

def assign_points_to_clusters(X, centroids):
 distances = np.sqrt(((X - centroids[:, np.newaxis])**2).sum(axis=2))
 cluster_assignments = np.argmin(distances, axis=0)
 return cluster_assignments

def update_cluster_centers_kmeans(X, cluster_assignments, num_clusters):
 new_centroids = np.array([X[cluster_assignments == i].mean(axis=0) for i in range(num_clusters)])
 return new_centroids


def kmeans(X, num_clusters, num_iterations):
 centroids = initialize_clusters_kmeans(X, num_clusters)
 for _ in range(num_iterations):
  cluster_assignments = assign_points_to_clusters(X, centroids)
  new_centroids = update_cluster_centers_kmeans(X, cluster_assignments, num_clusters)
  if np.all(centroids == new_centroids):
    break
  centroids = new_centroids
 return cluster_assignments, centroids


#Define K-Medoid clustering
def initialize_clusters_kmedoid(X, num_clusters):
    random_indices = np.random.choice(X.shape[0], num_clusters, replace=False)
    medoids = X[random_indices]
    return medoids

def assign_points_to_medoids(X, medoids):
    distances = np.abs(X - medoids[:, np.newaxis])
    cluster_assignments = np.argmin(distances.sum(axis=2), axis=0)
    return cluster_assignments

def update_medoids(X, cluster_assignments, num_clusters):
    new_medoids = np.array([X[cluster_assignments == i].mean(axis=0) for i in range(num_clusters)])
    return new_medoids

def kmedoid(X, num_clusters, num_iterations):
    medoids = initialize_clusters_kmedoid(X, num_clusters)
    for _ in range(num_iterations):
        cluster_assignments = assign_points_to_medoids(X, medoids)
        new_medoids = update_medoids(X, cluster_assignments, num_clusters)
        if np.all(medoids == new_medoids):
            break
        medoids = new_medoids
    return cluster_assignments, medoids

# Set random seed for reproducibility
np.random.seed(42)

num_clusters = 2
num_iterations = 100
kmeans_cluster_assignments, kmeans_centroids = kmeans(X, num_clusters, num_iterations)
kmedoid_cluster_assignments, kmedoid_medoids = kmedoid(X, num_clusters, num_iterations)

# Plotting K-Means clusters
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
for i in range(num_clusters):
    cluster_points = X[kmeans_cluster_assignments == i]
    if len(cluster_points) > 0:
        plt.scatter(cluster_points[:, 0], cluster_points[:, 1], label=f'Cluster {i}')
plt.scatter(kmeans_centroids[:, 0], kmeans_centroids[:, 1], marker='X', s=100, c='red', label='Centroids')
plt.title("K-Means Clustering")
plt.xlabel("radius_mean")
plt.ylabel("texture_mean")
plt.legend()
plt.plot();


# Plotting K-Medoid clusters
plt.subplot(1, 2, 2)
plt.scatter(X[:, 0], X[:, 1], c=kmedoid_cluster_assignments)
plt.scatter(kmedoid_medoids[:, 0], kmedoid_medoids[:, 1], marker='X', s=100, c='red')
plt.title("K-Medoid Clustering")
plt.xlabel("radius_mean")
plt.ylabel("texture_mean")

plt.tight_layout()
plt.show()


# Count the number of points belonging to each cluster for K-Means
kmeans_cluster_counts = np.bincount(kmeans_cluster_assignments)

# Count the number of points belonging to each cluster for K-Medoid
kmedoid_cluster_counts = np.bincount(kmedoid_cluster_assignments)

print("K-Means Cluster Counts:")
print(kmeans_cluster_counts)

print("---------------------------------")

print("K-Medoid Cluster Counts:")
print(kmedoid_cluster_counts)



